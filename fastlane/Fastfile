# Customize this file, documentation can be found here:
# https://docs.fastlane.tools/actions/
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.69.0"

# 定义平台
default_platform :ios



def archive(path,name,scheme,method)
  gym(
        clean: true,
        include_symbols: true,
        include_bitcode: false,
        scheme: scheme,
        include_symbols: false,
        export_method: method,
        configuration: 'Release',
        output_directory: path,
        output_name: name,
      )
end

# def ftpUpload(ftp_host,username,password)

# end


# 在操作打包部署前所做的事情，比如更新代码，cocoapod命令
platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    # cocoapods
    # cocoapods

    desc "执行cocoapod操作"
    cocoapods

  end


  lane :test do
    run_tests
  end

  # 定义lane
  desc "Take screenshots"
  lane :screenshot do
    snapshot
  end

  lane :beta do
    # match(type: "appstore") # more information: https://codesigning.guide
    # build_app # more options available
    # upload_to_testflight

    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)


    desc "暂时性的"

    app_identifier="com.xkeshi.synergy"

    # project_path="/Users/MicroSparrow/Documents/04_Learn/01_IOS/FastlaneProject"
    now=Time.now.strftime('%Y%m%d%H%M')



    #指定项目的scheme名称
    scheme="FastlaneProject"
    #指定要打包的配置名
    # configuration="Adhoc"
    #指定打包所使用的输出方式，目前支持app-store, package, ad-hoc, enterprise, development, 和developer-id，即xcodebuild的method参数
    export_method='ad-hoc'

    workspace="FastlaneProject.xcworkspace"
    method_type="enterprise"
    configuration="Release"

    # #上述scheme/target/configuration若不清楚值可以用`xcodebuild -list`查看
    # #指定输出路径
    output_path="/Users/MicroSparrow/Documents/04_Learn/01_iOS_Fastlane"
    # #指定输出归档文件地址
    archive_path="#{output_path}/#{scheme}_#{now}.xcarchive"
    # #指定输出ipa地址
    # ipa_path="$output_path/${scheme}_${now}.ipa"
    # #指定输出ipa名称
    ipa_name="#{scheme}.ipa"
    # #获取执行命令时的commit message
    # commit_msg="$1"

    #输出设定的变量值
    # echo "===workspace path: ${workspace_path}==="
    # echo "===archive path: ${archive_path}==="
    # echo "===ipa path: ${ipa_path}==="
    # echo "===export method: ${export_method}==="
    # echo "===commit msg: $1==="

    # #先清空前一次build
    # fastlane gym --workspace ${workspace_path} --scheme ${scheme} --clean --configuration ${configuration} --archive_path ${archive_path} --export_method ${export_method} --output_directory ${output_path} --output_name ${ipa_name}


     gym(
        clean: true,
        include_symbols: true,
        include_bitcode: false,
        scheme: scheme,
        workspace: workspace, 
        export_method: method_type,
        configuration: configuration,
        output_directory: output_path,
        output_name: ipa_name,
        archive_path: archive_path,

        buildlog_path: "./fastlanelog",
        silent: true,  #Hide all information that's not necessary while building
        suppress_xcode_output: false, #Suppress the output of xcodebuild to stdout. Output is still saved in buildlog_path
        # export_options: "./ExportOptions.plist",
        export_xcargs: "-allowProvisioningUpdates",
        export_options: {
                provisioningProfiles: {
                    app_identifier => "match AdHoc #{app_identifier}"
                }
            }
      )


      screenshot

     # archive(output_path,ipa_name,scheme,method_type)
    
  end


  lane :release do
    # sync_code_signing(type: "appstore")
    # capture_screenshots
    # build_app # Build your app - more options available
    # upload_to_app_store(force: true)
    # frame_screenshots
  end

  # You can define as many lanes as you want


# 执行部署流程后的动作
  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

# 如果流程发生异常会执行当前
  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://docs.fastlane.tools/advanced/#control-configuration-by-lane-and-by-platform
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded.
# Learn more at https://docs.fastlane.tools/#metrics
